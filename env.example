# Poolside CLI Configuration
# Copy this file to .env and fill in your credentials

# ================================
# OpenAI Configuration (Required)
# ================================
POOLSIDE_OPENAI_API_KEY=sk-your_openai_api_key_here
POOLSIDE_AI_MODEL=gpt-4o
POOLSIDE_AI_MAX_TOKENS=4000

# ================================
# JIRA Configuration (Required)
# ================================
POOLSIDE_JIRA_HOST=your-company.atlassian.net
POOLSIDE_JIRA_USERNAME=your_jira_username
POOLSIDE_JIRA_PASSWORD=your_jira_password_or_pat

# ================================
# GitHub Configuration (Required for Release Notes)
# ================================
POOLSIDE_GITHUB_TOKEN=ghp_your_github_token_here

# ================================
# Configuration Notes
# ================================
# 
# OpenAI API Key:
# - Get from: https://platform.openai.com/api-keys
# - Required for generating coding prompts and release notes
# - Models: gpt-4o (best quality), gpt-4o-mini (good balance), gpt-3.5-turbo (fastest)
#
# JIRA Configuration:
# - Get from: https://id.atlassian.com/manage-profile/security/api-tokens
# - JIRA_HOST: Your JIRA hostname WITHOUT https:// (e.g., company.atlassian.net)
# - JIRA_USERNAME: Your JIRA username/email
# - JIRA_PASSWORD: Your JIRA password or Personal Access Token (PAT recommended)
# - For PAT setup, run: poolside setup-jira-pat
#
# GitHub Token Configuration:
# ════════════════════════════════════════════════════════════════════════════════
# 
# 🔗 Where to Get Tokens:
#   CLASSIC TOKENS:     https://github.com/settings/tokens
#   FINE-GRAINED:       https://github.com/settings/tokens?type=beta (recommended)
#
# 📋 Required for Release Notes Generation:
#   - Repository validation and access
#   - Reading pull request data (CRITICAL!)
#   - Automatic branch detection
#   - Organization access (for org repositories)
#
# 🔐 TOKEN TYPE 1: FINE-GRAINED TOKENS (Recommended)
# ──────────────────────────────────────────────────────────────────────────────
#   Repository Permissions Required:
#   ├── Contents: Read           ✅ Access repository files and metadata
#   ├── Metadata: Read           ✅ Access repository metadata (mandatory)
#   └── Pull requests: Read      ✅ List and read pull requests (ESSENTIAL!)
#
#   Organization Settings:
#   └── Resource owner: [Your-Org]  ✅ Select your organization (e.g., Istari-digital)
#   └── Repository access: All      ✅ OR select specific repositories
#
#   ⚠️  CRITICAL: Missing "Pull requests: Read" permission will cause:
#       "Resource not accessible by personal access token" errors
#
# 🔐 TOKEN TYPE 2: CLASSIC TOKENS (Legacy)
# ──────────────────────────────────────────────────────────────────────────────
#   Required Scopes:
#
#   FOR PUBLIC REPOSITORIES:
#   ├── public_repo              ✅ Access public repositories
#   └── read:org                 ✅ Read organization membership
#
#   FOR PRIVATE REPOSITORIES:
#   ├── repo                     ✅ Full control of private repositories
#   │   ├── repo:status          ├── Access commit status
#   │   ├── repo_deployment      ├── Access deployment status  
#   │   ├── public_repo          ├── Access public repositories
#   │   └── repo:invite          └── Access repository invitations
#   └── read:org                 ✅ Read organization membership
#
# 💡 Recommended Setup:
#   1. Use Fine-grained tokens for better security
#   2. For Classic tokens: use "repo" + "read:org" for maximum compatibility
#   3. Set expiration to 90 days max
#   4. Test with: poolside setup test
#
# ⚠️  Common Token Issues:
#   Fine-grained tokens:
#   - "Resource not accessible" = missing "Pull requests: Read" permission
#   - "Repository not found" = missing organization access or wrong owner
#   
#   Classic tokens:
#   - "Not Found" errors = missing repo scope or repository doesn't exist
#   - "Access denied" errors = missing read:org scope for organization repos
#
# 🔄 Token Management:
#   - Set expiration to 90 days max for security
#   - Rotate tokens regularly
#   - Use environment variables in production
#   - Never commit tokens to version control
#
# Security Notes:
# - Never commit this file to version control
# - Use environment variables in production
# - Rotate tokens regularly
# - Personal Access Tokens are more secure than passwords 
